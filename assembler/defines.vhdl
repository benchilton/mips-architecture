---Autogenerated file by MIPs assembler---
library ieee;
use ieee.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

package defines is

	type alu_operations is ( ALU_ADD, ALU_ADDU, ALU_SUB, ALU_SUBU, ALU_MUL, ALU_DIV, ALU_AND, ALU_OR, ALU_NOR, ALU_XOR, ALU_LSL, ALU_RSL, ALU_LSA, ALU_RSA, ALU_LESS_THAN);

	type inst_opcodes is (
		Op_R_TYPE,
		Op_J,
		Op_JAL,
		Op_BEQ,
		Op_BNE,
		Op_BLEZ,
		Op_BGTZ,
		Op_ADDI,
		Op_ADDIU,
		Op_SLTI,
		Op_SLTIU,
		Op_ANDI,
		Op_ORI,
		Op_XORI,
		Op_LWS,
		Op_LWE,
		Op_SW,
		Op_SHW,
		Op_SB,
		Op_ENUM_MAX
	);

	attribute op_encoding : std_logic_vector ;

	attribute op_encoding of Op_R_TYPE[return inst_opcodes] : literal is b"000000";
	attribute op_encoding of Op_J[return inst_opcodes] : literal is b"000010";
	attribute op_encoding of Op_JAL[return inst_opcodes] : literal is b"000011";
	attribute op_encoding of Op_BEQ[return inst_opcodes] : literal is b"000100";
	attribute op_encoding of Op_BNE[return inst_opcodes] : literal is b"000101";
	attribute op_encoding of Op_BLEZ[return inst_opcodes] : literal is b"000110";
	attribute op_encoding of Op_BGTZ[return inst_opcodes] : literal is b"000111";
	attribute op_encoding of Op_ADDI[return inst_opcodes] : literal is b"001000";
	attribute op_encoding of Op_ADDIU[return inst_opcodes] : literal is b"001001";
	attribute op_encoding of Op_SLTI[return inst_opcodes] : literal is b"001010";
	attribute op_encoding of Op_SLTIU[return inst_opcodes] : literal is b"001011";
	attribute op_encoding of Op_ANDI[return inst_opcodes] : literal is b"001100";
	attribute op_encoding of Op_ORI[return inst_opcodes] : literal is b"001101";
	attribute op_encoding of Op_XORI[return inst_opcodes] : literal is b"001110";
	attribute op_encoding of Op_LWS[return inst_opcodes] : literal is b"001111";
	attribute op_encoding of Op_LWE[return inst_opcodes] : literal is b"010000";
	attribute op_encoding of Op_SW[return inst_opcodes] : literal is b"101011";
	attribute op_encoding of Op_SHW[return inst_opcodes] : literal is b"101100";
	attribute op_encoding of Op_SB[return inst_opcodes] : literal is b"101101";

	type inst_funct is (
		Fu_SLL,
		Fu_SRL,
		Fu_SRA,
		Fu_SLLV,
		Fu_SRLV,
		Fu_SRAV,
		Fu_JR,
		Fu_JALR,
		Fu_MFHI,
		Fu_MTHI,
		Fu_MFLO,
		Fu_MTLO,
		Fu_MUL,
		Fu_MULT,
		Fu_MULTU,
		Fu_DIV,
		Fu_DIVU,
		Fu_ADD,
		Fu_ADDU,
		Fu_SUB,
		Fu_SUBU,
		Fu_AND,
		Fu_OR,
		Fu_XOR,
		Fu_NOR,
		Fu_SLT,
		Fu_SLTU,
		Fu_ENUM_MAX
	);

	attribute fu_encoding : std_logic_vector;

	attribute fu_encoding of Fu_SLL[return inst_funct] : literal is b"000000";
	attribute fu_encoding of Fu_SRL[return inst_funct] : literal is b"000010";
	attribute fu_encoding of Fu_SRA[return inst_funct] : literal is b"000011";
	attribute fu_encoding of Fu_SLLV[return inst_funct] : literal is b"000100";
	attribute fu_encoding of Fu_SRLV[return inst_funct] : literal is b"000110";
	attribute fu_encoding of Fu_SRAV[return inst_funct] : literal is b"000111";
	attribute fu_encoding of Fu_JR[return inst_funct] : literal is b"001000";
	attribute fu_encoding of Fu_JALR[return inst_funct] : literal is b"001001";
	attribute fu_encoding of Fu_MFHI[return inst_funct] : literal is b"010000";
	attribute fu_encoding of Fu_MTHI[return inst_funct] : literal is b"010001";
	attribute fu_encoding of Fu_MFLO[return inst_funct] : literal is b"010010";
	attribute fu_encoding of Fu_MTLO[return inst_funct] : literal is b"010011";
	attribute fu_encoding of Fu_MUL[return inst_funct] : literal is b"010111";
	attribute fu_encoding of Fu_MULT[return inst_funct] : literal is b"011000";
	attribute fu_encoding of Fu_MULTU[return inst_funct] : literal is b"011001";
	attribute fu_encoding of Fu_DIV[return inst_funct] : literal is b"011010";
	attribute fu_encoding of Fu_DIVU[return inst_funct] : literal is b"011011";
	attribute fu_encoding of Fu_ADD[return inst_funct] : literal is b"100000";
	attribute fu_encoding of Fu_ADDU[return inst_funct] : literal is b"100001";
	attribute fu_encoding of Fu_SUB[return inst_funct] : literal is b"100010";
	attribute fu_encoding of Fu_SUBU[return inst_funct] : literal is b"100011";
	attribute fu_encoding of Fu_AND[return inst_funct] : literal is b"100100";
	attribute fu_encoding of Fu_OR[return inst_funct] : literal is b"100101";
	attribute fu_encoding of Fu_XOR[return inst_funct] : literal is b"100110";
	attribute fu_encoding of Fu_NOR[return inst_funct] : literal is b"100111";
	attribute fu_encoding of Fu_SLT[return inst_funct] : literal is b"101010";
	attribute fu_encoding of Fu_SLTU[return inst_funct] : literal is b"101011";

---Lookup functions
	function lookup_inst_opcode( lookup_val : in integer ) return inst_opcodes;
	function lookup_inst_funct( lookup_val : in integer ) return inst_funct;

end package defines;
package body defines is

	function lookup_inst_opcode( lookup_val : in integer) return inst_opcodes is
		variable ret_val : inst_opcodes := Op_R_TYPE;
	begin
		case( lookup_val ) is
			when 2#000010# =>
				ret_val := Op_J;
			when 2#000011# =>
				ret_val := Op_JAL;
			when 2#000100# =>
				ret_val := Op_BEQ;
			when 2#000101# =>
				ret_val := Op_BNE;
			when 2#000110# =>
				ret_val := Op_BLEZ;
			when 2#000111# =>
				ret_val := Op_BGTZ;
			when 2#001000# =>
				ret_val := Op_ADDI;
			when 2#001001# =>
				ret_val := Op_ADDIU;
			when 2#001010# =>
				ret_val := Op_SLTI;
			when 2#001011# =>
				ret_val := Op_SLTIU;
			when 2#001100# =>
				ret_val := Op_ANDI;
			when 2#001101# =>
				ret_val := Op_ORI;
			when 2#001110# =>
				ret_val := Op_XORI;
			when 2#001111# =>
				ret_val := Op_LWS;
			when 2#010000# =>
				ret_val := Op_LWE;
			when 2#101011# =>
				ret_val := Op_SW;
			when 2#101100# =>
				ret_val := Op_SHW;
			when 2#101101# =>
				ret_val := Op_SB;
			when others =>
				ret_val := Op_R_TYPE;
		end case;
		return ret_val;
	end function;


	function lookup_inst_funct( lookup_val : in integer) return inst_funct is
		variable ret_val : inst_funct := Fu_SLL;
	begin
		case( lookup_val ) is
			when 2#000000# =>
				ret_val := Fu_SLL;
			when 2#000010# =>
				ret_val := Fu_SRL;
			when 2#000011# =>
				ret_val := Fu_SRA;
			when 2#000100# =>
				ret_val := Fu_SLLV;
			when 2#000110# =>
				ret_val := Fu_SRLV;
			when 2#000111# =>
				ret_val := Fu_SRAV;
			when 2#001000# =>
				ret_val := Fu_JR;
			when 2#001001# =>
				ret_val := Fu_JALR;
			when 2#010000# =>
				ret_val := Fu_MFHI;
			when 2#010001# =>
				ret_val := Fu_MTHI;
			when 2#010010# =>
				ret_val := Fu_MFLO;
			when 2#010011# =>
				ret_val := Fu_MTLO;
			when 2#010111# =>
				ret_val := Fu_MUL;
			when 2#011000# =>
				ret_val := Fu_MULT;
			when 2#011001# =>
				ret_val := Fu_MULTU;
			when 2#011010# =>
				ret_val := Fu_DIV;
			when 2#011011# =>
				ret_val := Fu_DIVU;
			when 2#100000# =>
				ret_val := Fu_ADD;
			when 2#100001# =>
				ret_val := Fu_ADDU;
			when 2#100010# =>
				ret_val := Fu_SUB;
			when 2#100011# =>
				ret_val := Fu_SUBU;
			when 2#100100# =>
				ret_val := Fu_AND;
			when 2#100101# =>
				ret_val := Fu_OR;
			when 2#100110# =>
				ret_val := Fu_XOR;
			when 2#100111# =>
				ret_val := Fu_NOR;
			when 2#101010# =>
				ret_val := Fu_SLT;
			when 2#101011# =>
				ret_val := Fu_SLTU;
			when others =>
				ret_val := Fu_SLL;
		end case;
		return ret_val;
	end function;


end package body defines;
---End of file